import efl_selection_types;

mixin Efl.Selection {
   [[Efl Copy and Paste class]]
   //legacy_prefix: elm_cnp;
   //eo_prefix: efl_selection;
   //data: Efl_Selection_Data_Priv;
   data: null;
   methods {
      selection_set {
         params {
            @in type: Efl.Selection.Type; [[Selection Type]]
            @in format: Efl.Selection.Format; [[Selection Format]]
            @in data: Eina.Slice;
            @in seat: uint @optional;[[Specified seat for multiple seats case.]]
         }
      }
      selection_get {
         params {
            @in type: Efl.Selection.Type; [[Selection Type]]
            @in format: Efl.Selection.Format; [[Selection Format]]
            @in data_func: Efl.Selection.Data_Ready; [[Data ready function pointer]]
            @in seat: uint @optional;[[Specified seat for multiple seats case.]]
         }
      }
      selection_clear {
         params {
            @in type: Efl.Selection.Type; [[Selection Type]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
      //selection_has { //change to property selection_owner
      has_owner {
         params {
            @in type: Efl.Selection.Type; [[Selection type]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
         return: bool;
      }
   }
   implements {
   }
   events {
      selection,lost; [[Called when selection has lost]]
      selection,changed; [[Called when display server's selection has changed]]
   }
}
