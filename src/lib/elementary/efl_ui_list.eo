struct Efl.Ui.List.Item_Event
{
   [[]]
   layout: Elm.Layout; [[]]
   child: Efl.Model; [[]]
   index: int; [[]]
}

struct Efl.Ui.View.Item
{
   [[]]
}

enum Efl.Ui.View.Load.Mode
{
   [[]]
   legacy: efl_ui_view_load;
   default = 0, [[]]
   lazy = 1, [[]]
   end_scroll = 2 [[]]
}

class Efl.Ui.List (Elm.Layout, Efl.Ui.View, Elm.Interface_Scrollable,
                Elm.Interface.Atspi_Widget_Action, Elm.Interface.Atspi.Selection,
                Efl.Ui.Clickable, Efl.Ui.Selectable)
{
   methods {
      @property homogeneous {
         get {
           [[Get whether the homogeneous mode is enabled.]]
         }
         set {
           [[Enable/disable homogeneous mode.]]
         }
         values {
            homogeneous: bool; [[Assume the items within the genlist are of
                                 the same height and width. Default is $false.]]
         }
      }
      @property select_mode {
         [[Listview select mode.]]
         get {}
         set {}
         values {
            mode: Elm.Object.Select_Mode(Elm.Object.Select_Mode.max); [[The select mode.]]
         }
      }
      @property default_style {
         values {
            style: stringshare;
         }
      }
<<<<<<< HEAD
      // FIMXE protected feature in arrayview
      item_new @protected {
         [[create internal item data]]
         return: ptr(Efl.Ui.View.Item); [[Item Data]]
         params {
            @in model: Efl.Model; [[model of list view]]
         }
      }
      item_remove @protected {
         [[remove internal item data]]
         params {
            @in item: ptr(Efl.Ui.View.Item); [[Item of list view]]
         }
      }
      item_realize @protected {
         [[realize item when item need to be loadded]]
         return: Elm.Layout; [[ View Layout of Item Data]]
         params {
            @in item: ptr(Efl.Ui.View.Item); [[Item of list view]]
         }
      }
      item_unrealize @protected {
         [[unrealize item when item need to be unloadded]]
         return: Elm.Layout; [[ View Layout of Item Data]]
         params {
            @in item: ptr(Efl.Ui.View.Item); [[Item of list view]]
         }
      }
      item_calculate @protected {
         [[calculate item size]]
         params {
            @in item: ptr(Efl.Ui.View.Item); [[Item of list view]]
         }
      }
      items_load @protected {
         [[load items weather they need to be loaded or not]]
         params {
            @in calc: bool; [[boolen value for item calculation]]
            @in type: Efl.Ui.View.Load.Mode; [[Item of list view]]
         }
      }
      @property layout_factory {
         [[Listview layout factory set.]]
         set {}
         values {
            factory: Efl.Ui.Factory; [[The factory.]]
         }
      }
   }
   events {
      item,realized : Efl.Ui.List.Item_Event;
      item,unrealized : Efl.Ui.List.Item_Event;
      item,focused : Efl.Ui.List.Item_Event;
      item,unfocused : Efl.Ui.List.Item_Event;
      item,highlighted : Efl.Ui.List.Item_Event;
      item,unhighlighted : Efl.Ui.List.Item_Event;
      item,selected : Efl.Ui.List.Item_Event;
      item,unselected : Efl.Ui.List.Item_Event;
   }

   implements {
      Efl.Object.constructor;
      Efl.Object.destructor;
      Efl.Gfx.position { set; }
      Efl.Gfx.size { set; }
      // Smart obj
      Efl.Canvas.Group.group_member_add;
      Efl.Canvas.Group.group_calculate;

      // Widget
      Elm.Widget.theme_apply;
//      Elm.Widget.focus_next_manager_is;
//      Elm.Widget.focus_direction_manager_is;
//      Elm.Widget.focus_register;
//      Elm.Widget.focus_next;
      Elm.Widget.on_focus;
//      Elm.Widget.activate;
//      Elm.Widget.focused_item { get; }
//      Elm.Widget.focused_object { get; }
      Elm.Widget.focus_manager_factory;
      Elm.Widget.widget_event;

      Elm.Layout.sizing_eval;
      Efl.Ui.View.model { get; set; }

      Elm.Interface_Scrollable.region_bring_in;
      Elm.Interface.Atspi_Accessible.children { get; }
      Elm.Interface.Atspi_Widget_Action.elm_actions { get; }
      Elm.Interface.Atspi.Selection.selected_children_count { get; }
      Elm.Interface.Atspi.Selection.selected_child { get; }
      Elm.Interface.Atspi.Selection.selected_child_deselect;
      Elm.Interface.Atspi.Selection.child_select;
      Elm.Interface.Atspi.Selection.child_deselect;
      Elm.Interface.Atspi.Selection.is_child_selected;
      Elm.Interface.Atspi.Selection.all_children_select;
      Elm.Interface.Atspi.Selection.clear;
   }
}
