import efl_ui_dnd_types;

mixin Efl.Ui.Dnd {
   //eo_prefix: efl_dnd;
   data: null;
   methods {
      drag_start {
         [[This starts a drag and drop process at the drag side.
           During dragging, there are three events emitted as belows:
              - EFL_UI_DND_EVENT_DRAG_POS
              - EFL_UI_DND_EVENT_DRAG_ACCEPT
              - EFL_UI_DND_EVENT_DRAG_DONE
         ]]
         params {
            @in format: Efl.Selection.Format; [[The data format]]
            @in data: Eina.Slice; [[The drag data]]
            @in action: Efl.Selection.Action; [[Action when data is transferred]]
            @in icon_func: Efl.Dnd.Drag_Icon_Create; [[Function pointer to create icon]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
      drag_action_set {
         [[This sets the action for the drag]]
         params {
            @in action: Efl.Selection.Action; [[Drag action]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
      drag_cancel {
         [[This cancels the on-going drag]]
         params {
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
      drop_target_add { //change to property (keys: format, seat, value: boolean)
         [[There are four events emitted: EFL_UI_DND_EVENT_DRAG_ENTER, EFL_UI_DND_EVENT_DRAG_LEAVE,
           EFL_DND_UI_EVENT_DRAG_POS, EFL_UI_DND_EVENT_DRAG_DROP.]]
         params {
            @in format: Efl.Selection.Format; [[Accepted data format]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
      drop_target_del { //remove
         params {
            @in format: Efl.Selection.Format; [[Accepted data format]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
   }
   implements {
   }
   events {
      drag,accept; [[accept drag data]]
      drag,done; [[drag is done (mouse up)]]
      drag,enter; [[called when the drag object enters this object]]
      drag,leave; [[called when the drag object leaves this object]]
      drag,pos; [[called when the drag object changes drag position]]
      drag,drop; [[called when the drag object dropped on this object]]
   }
}
