struct Efl.Ui.Gridview.Child
{
   view: Elm.Layout;
   model: Efl.Model;
   index: int;
   row: int;
   column: int;
}

class Efl.Ui.Gridview (Elm.Layout,
                       Efl.Ui.View,
                       Elm.Interface_Scrollable,
                       Elm.Interface.Atspi_Widget_Action,
                       Elm.Interface.Atspi.Selection,
                       Efl.Ui.Clickable,
                       Efl.Ui.Selectable,
                       Efl.Ui.Focus.Manager,
                       Efl.Orientation //Efl.Ui.Direction
                       )
{
   legacy_prefix: null;
   methods {
      @property homogeneous {
         get {
           [[Get whether the homogeneous mode is enabled.]]
         }
         set {
           [[Enable/disable homogeneous mode.]]
         }
         values {
            homogeneous: bool; [[Assume the items within the genlist are of
                                 the same height and width. Default is $false.]]
         }
      }
      @property select_mode {
         [[Listview select mode.]]
         get {}
         set {}
         values {
            mode: Elm.Object.Select_Mode(Elm.Object.Select_Mode.max); [[The select mode.]]
         }
      }
      @property default_style {
         values {
            style: stringshare;
         }
      }
      @property layout_factory {
         [[Listview layout factory set.]]
         set {}
         values {
            factory: Efl.Ui.Factory; [[The factory.]]
         }
      }
      // FIMXE protected feature in baseview
      custom_layout @protected {
         [[Update the view on the current viewport and layout the children.
          size hint of the view could be updated.]]
          params {
            @in syncrnous: bool; [[]]
          }
      }
   }
   events {
      child,realized : Efl.Ui.Gridview.Child;
      child,unrealized : Efl.Ui.Gridview.Child;
      child,focused : Efl.Ui.Gridview.Child;
      child,unfocused : Efl.Ui.Gridview.Child;
      child,highlighted : Efl.Ui.Gridview.Child;
      child,unhighlighted : Efl.Ui.Gridview.Child;
      child,selected : Efl.Ui.Gridview.Child;
      child,unselected : Efl.Ui.Gridview.Child;
   }

   implements {
      Efl.Object.constructor;
      Efl.Object.destructor;

      Efl.Gfx.position { set; }
      Efl.Gfx.size { set; }

      // Smart obj
      Efl.Canvas.Group.group_member_add;
      Efl.Canvas.Group.group_calculate;

      // Widget
      Elm.Widget.theme_apply;
//      Elm.Widget.focus_next_manager_is;
//      Elm.Widget.focus_direction_manager_is;
//      Elm.Widget.focus_next;
//      Elm.Widget.focus_direction;
//      Elm.Widget.activate;
//      Elm.Widget.focused_item { get; }
//      Elm.Widget.focused_object { get; }
      Elm.Widget.on_focus;
      Elm.Widget.focus_manager_factory;
      Elm.Widget.widget_event;

      Elm.Layout.sizing_eval;
      Efl.Ui.View.model { get; set; }

      // List : FIXME! Gridview Need to Inherit Common parent of listview
//      Efl.Ui.List.homogeneous { get; set; }
//      Efl.Ui.List.default_style { get; set; }
//      Efl.Ui.List.select_mode { get; set; }
//      Efl.Ui.List.layout_factory { set; }
//      Efl.Ui.List.custom_layout;
//      Efl.Ui.List.child_new;
//      Efl.Ui.List.child_remove;
//      Efl.Ui.List.child_realize;
//      Efl.Ui.List.child_unrealize;
//      Efl.Ui.List.child_calculate;

//      Elm.Interface_Scrollable.region_bring_in;
      Elm.Interface.Atspi_Accessible.children { get; }
      Elm.Interface.Atspi_Widget_Action.elm_actions { get; }
      Elm.Interface.Atspi.Selection.selected_children_count { get; }
      Elm.Interface.Atspi.Selection.selected_child { get; }
      Elm.Interface.Atspi.Selection.selected_child_deselect;
      Elm.Interface.Atspi.Selection.child_select;
      Elm.Interface.Atspi.Selection.child_deselect;
      Elm.Interface.Atspi.Selection.is_child_selected;
      Elm.Interface.Atspi.Selection.all_children_select;
      Elm.Interface.Atspi.Selection.clear;

      Efl.Orientation.orientation { set; get; }
   }
}
